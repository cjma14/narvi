---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@data/constants";
import PrimaryCTA from "@/components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@/components/ui/buttons/SecondaryCTA.astro";
import AccordionTableItem from "@/components/ui/blocks/AccordionTableItem.astro";

// This gets the static paths for all the unique products
export async function getStaticPaths() {
  const productEntries = await getCollection("products", ({ id }) =>
    id.startsWith("en/")
  );
  return productEntries.map((product) => {
    const slugWithoutLang = product.slug.replace(/^en\//, ""); // Remove the "en/" prefix
    return {
      params: { slug: slugWithoutLang },
      props: { product },
    };
  });
}

const { product } = Astro.props;
const makeId = (base: any, index: any) => `${base}${index + 1}`;

function getSpecification(name: any) {
  const fragments = name.split(":")

  if(fragments.length == 1){
    return fragments[0] 
  }

  const [title, value] = fragments;
  return `<span class="font-bold">${title}:</span> ${value}`
  
}

const pageTitle: string = `${product.data.title} | ${SITE.title}`;

const serverBaseUrl = new URL(Astro.request.url);
---

<MainLayout title={pageTitle}>
  <section class="mx-auto max-w-screen-2xl px-4 text-pearl-100 sm:px-6 lg:px-8">
    <div
      class="grid grid-cols-1 gap-4 pt-[6rem] md:grid-cols-2 md:gap-10 md:pt-[10rem]"
    >
      <!-- Gallery -->
      <div class="fade-left rounded border border-[#244840] p-4">
        <div class="swiper swiperProduct">
          <div class="swiper-wrapper">
            {
              product.data.gallery.map((imageUrl, index) => (
                <div class="swiper-slide">
                  <div class="swiper-zoom-container">
                    <Image
                      src={imageUrl as any}
                      alt={product.data.title + "-" + index}
                      draggable={"false"}
                      class="cursor-zoom-in rounded aspect-[4/3] w-[40rem] object-contain"
                    />
                  </div>
                </div>
              ))
            }
          </div>
        </div>

        <div class="swiper thumbsSlider mt-4">
          <div class="swiper-wrapper">
            {
              product.data.gallery.map((imageUrl, index) => (
                <div
                  class:list={[{ active: index == 0 }]}
                  class="swiper-slide cursor-pointer rounded border border-2"
                >
                  <Image
                    src={imageUrl as any}
                    alt={product.data.title + "-" + index}
                    draggable={"false"}
                    class="aspect-[4/3] w-[40rem] object-contain"
                  />
                </div>
              ))
            }
          </div>
        </div>
      </div>

      <!-- info -->
      <div class="fade-right flex flex-col justify-center gap-y-2">
        <h1
          class="text-xl font-bold tracking-tighter sm:text-5xl md:text-4xl md:text-6xl lg:text-7xl"
        >
          {product.data.title}
        </h1>
        <p class="text-md md:mt-5 md:text-xl">
          {product.data.shortDescription}
        </p>
        <div class="mt-5">
          <PrimaryCTA
            title={product.data.btnSaleTitle}
            url={`${product.data.btnSaleURL}?product=${serverBaseUrl}`}
          />
        </div>
      </div>
    </div>
  </section>
  <div class="mx-auto max-w-screen-2xl px-4 text-pearl-100 sm:px-6 lg:px-8 mt-[2rem] md:mt-[4rem] mb-[4rem]">
    {
      product.data.tableData.length == 1 ? (
        <h3 class="text-center text-xl font-bold">{product.data.tableData[0]?.title}</h3>
        <div class="grid grid-cols-1 rounded-lg pb-5 pt-2 md:grid-cols-2">
          {product.data.tableData[0]?.specifications.map((item, index) => (
            <div class="md:text-md flex items-center gap-4 border-b border-[#33524A] px-6 py-[34px] text-sm font-medium text-white">
              <div set:html={getSpecification(item)}></div>
            </div>
          ))}
        </div>
      ) : (
      <div
        class="hs-accordion-group grid md:grid-cols-2 gap-1 md:gap-4"
      >
        {
          product.data.tableData.map((table, i) => {
            // Generate ids dynamically for each FAQ accordion item.

            let id = makeId(
              "hs-basic-with-title-and-arrow-stretched-heading-",
              i
            );
            let collapseId = makeId(
              "hs-basic-with-title-and-arrow-stretched-collapse",
              i
            );

            return (
              <AccordionTableItem
                dataTable={table}
                id={id}
                collapseId={collapseId}
                first={false}
              />
            );
          })
        }
      </div>
      )
    }
  </div>
</MainLayout>

<style>
  .active {
    border-color: #78b032 !important;
  }

  .thumbsSlider .swiper-slide:hover {
    border-color: #78b032;
  }
</style>

<script>
  import Swiper from "swiper";
  import "@preline/accordion/index.js";
  import "swiper/css";
  import "swiper/css/pagination";
  import "swiper/css/zoom";
  import { Pagination, Autoplay, Thumbs, Zoom } from "swiper/modules";

  const thumbsSliderElement = document.querySelector(".thumbsSlider");

  var thumbsSlider = new Swiper(".thumbsSlider", {
    loop: false,
    spaceBetween: 10,
    slidesPerView: 4,
    freeMode: true,
    watchSlidesProgress: true,
    on: {
      click: function (swiper, event) {
        const element = event.target as HTMLElement;

        if (element instanceof HTMLImageElement) {
          thumbsSliderElement
            .querySelector(".active")
            .classList.remove("active");
          element.parentElement.classList.add("active");
        }
      },
    },
  });

  var swiper = new Swiper(".swiperProduct", {
    modules: [Thumbs, Zoom],
    zoom: {
      toggle: true,
    },
    slidesPerView: 1,
    spaceBetween: 20,
    thumbs: {
      swiper: thumbsSlider,
    },
    on: {
      click: function (swiper, event) {
        swiper.zoom.toggle();
      },
    },
  });
</script>
