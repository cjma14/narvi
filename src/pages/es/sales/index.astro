---
import MainLayout from "@/layouts/MainLayout.astro";
import MainSection from "@/components/ui/blocks/MainSection.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import { SITE } from "@data/constants";
import CardSales from "@/components/ui/cards/CardSales.astro";

const products: CollectionEntry<"products">[] = (
  await getCollection("products", ({ id }) => {
    return id.startsWith("es/");
  })
).sort(
  (a: CollectionEntry<"products">, b: CollectionEntry<"products">) =>
    a.data.id - b.data.id
);

const pageTitle: string = `Equipos para venta | ${SITE.title}`;
---

<MainLayout
  title={pageTitle}
  structuredData={{
    "@context": "https://schema.org",
    "@type": "WebPage",
    "@id": "https://narvi-ec.com/sales",
    url: "https://narvi-ec.com/sales",
    name: "Equipos para venta | Narvi EC",
    description: "Soluciones a medida para la industria petrolera",
    isPartOf: {
      "@type": "WebSite",
      url: "https://narvi-ec.com",
      name: "Narvi Enterprise Corporation",
      description:
        "Narvi EC ofrece servicios de ingeniería y mantenimiento en todo el continente americano, optimizando sus operaciones en el sector energético.",
    },
    inLanguage: "es",
  }}
>
  <MainSection
    label="Equipos para venta"
    title="Soluciones a medida para la industria petrolera"
    backgroundImg="/img/background4.jpg"
  />

  <div class="">
    <section
      class="mx-auto max-w-[85rem] items-center px-4 pt-10 text-center text-pearl-100 sm:px-6 lg:px-8 lg:pt-14 2xl:max-w-full"
    >
      <div class="flex flex-col items-center">
        <!-- Section subtitle -->
        <p class="mb-8 max-w-prose text-pretty font-light sm:text-xl">
          ¡Equipos pesados a tu alcance! Nuestra selección incluye camiones  y equipos de bombeo. Perfectos para proyectos de gran envergadura.
        </p>
      </div>
    </section>

    <section
      class="mx-auto max-w-[85rem] items-center px-4 pb-10 text-pearl-100 sm:px-6 lg:px-8 lg:pb-14 2xl:max-w-full" 
    >
      <form id="form-search" class="mx-auto max-w-sm">
        <div class="flex items-center">
          <label for="search-code" class="sr-only">Buscar</label>
          <div class="relative w-full text-neutral-500">
            <input
              type="text"
              id="search"
              class="dark:focus:ring-blue-500 dark:focus:border-blue-500 block w-full rounded-lg border border-gray-300 bg-gray-50 p-3 focus:border-primary-500 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-500 dark:text-white dark:placeholder-gray-400"
              placeholder="Search"
              required
            />
          </div>
          <!-- <button
            type="submit"
            class="border-blue-500 focus:ring-blue-300 dark:focus:ring-blue-700 ms-2 rounded-lg border bg-primary-500 p-3 text-sm font-medium text-white hover:bg-primary-400 focus:outline-none focus:ring-4 dark:bg-primary-600 dark:hover:bg-primary-500"
          >
            <svg
              class="h-4 w-4"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 20 20"
            >
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"></path>
            </svg>
            <span class="sr-only">Buscar</span>
          </button> -->
        </div>
        <span id="error-label" class="text-xs text-red-600"></span>
      </form>

      <div class="max-w-screen-3xl mx-auto px-5 md:px-20">
        <p id="noData" class="text-center text-2xl mt-20 hidden">No se encontraron resultados para la búsqueda...</p>
        <div
          id="list"
          class="list mb-10 mt-10 grid grid-cols-1 gap-4 md:grid-cols-2"
        >
          {
            products.map((product, index) => {
              return (
                <div id={product.slug} class="fade-up-down-group">
                  <CardSales product={product} productLocale="es"/>
                </div>
              );
            })
          }
        </div>
      </div>
    </section>
  </div>
</MainLayout>

<script>
  import DOMPurify from "dompurify";

  //Selectors
  const search = document.querySelector("#search") as HTMLInputElement;
  const noData = document.querySelector("#noData");
  const list = document.querySelector("#list") as HTMLElement;
  let SEARCH_DATA;
  //functions

  // Función para filtrar los datos

  function filter(search, data) {
    return data.filter((item) =>
      item.data.title.toLowerCase().includes(search.toLowerCase()),
    );
  }

  function showCards(filterData) {
    
    noData.classList.add("hidden")

    if(filterData.length == 0) {
      noData.classList.remove("hidden")
    }

    for (const child of list.children) {
      const slugCard = child.id
      

      if (!filterData.find((product) => product.slug == slugCard)) {
        child.classList.add("hidden");
      } else {
        child.classList.remove("hidden");
      }
    }
  }

  async function fetchSearchData() {
    try {
      const res = await fetch("../api/sales_equipment.json");

      if (!res.ok) {
        throw new Error("Something went wrong... Please try again");
      }

      const data = await res.json();
      SEARCH_DATA = data
     
    } catch (e) {
      console.error(e);
    }
  }

  //Event listeners
  window.addEventListener("DOMContentLoaded", () => {
    // const urlParams = DOMPurify.sanitize(new URLSearchParams(window.location.search).get("q"));
    // search.value = urlParams
    fetchSearchData()
  })

  search.addEventListener("input", () => {
    const searchTerm = DOMPurify.sanitize(search.value);
    const filterData = filter(searchTerm, SEARCH_DATA);
    showCards(filterData);
  });
</script>
